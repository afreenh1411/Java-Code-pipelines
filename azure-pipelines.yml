# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

# When manually running the pipeline, you can select whether it
# succeeds or fails.
parameters:
- name: succeed
  displayName: Succeed or fail
  type: boolean
  default: false

trigger:
- main

variables:
  jdkVersion: "1.11"
    
pool:
  vmImage: ubuntu-latest
# Build across multiple platforms
#strategy:
#  matrix:
#    linux:
#      imageName: "ubuntu-latest"
#    mac:
#      imageName: "macOS-latest"
#    windows:
#      imageName: "windows-latest"
#  maxParallel: 3
#pool:
#  vmImage: $(imageName)

# Build using different versions on single platform
#pool:
#  vmImage: ubuntu-latest
#strategy:
#  matrix:
#    jdk10:
#      jdkVersion: "1.10"
#    jdk11:
#      jdkVersion: "1.11"
#  maxParallel: 2

# Build on multiple platforms and versions
# strategy:
#   matrix:
#     jdk10_linux:
#       imageName: "ubuntu-latest"
#       jdkVersion: "1.10"
#     jdk11_windows:
#       imageName: "windows-latest"
#       jdkVersion: "1.11"
#   maxParallel: 2

# pool:
#   vmImage: $(imageName)

stages:
- stage: General
  jobs:
  - job: Work
    variables:
    - template: vars.yml
      parameters:
        DIRECTORY: "azure/checker"
        
    steps:
    - script: echo Hello, world!
      displayName: 'Run a one-line script'
    
    - script: echo My favorite vegetable is ${{ variables.favoriteVeggie }}.
    
    - script: echo $(RELEASE_COMMAND) #output release command
    
    - script: |
        echo Add other tasks to build, test, and deploy your project.
        echo See https://aka.ms/yaml
      displayName: 'Run a multi-line script'

    # This malformed command causes the job to fail
    # Only run this command if the succeed variable is set to false
    #- script: git clone malformed input
    #  condition: eq(${{ parameters.succeed }}, false)

  - job: MavenBuild
    dependsOn: Work
    condition: succeeded()
    steps:    
    - task: Maven@4
      inputs:
        mavenPomFile: "pom.xml"
        mavenOptions: "-Xmx3072m"
        javaHomeOption: "JDKVersion"
        jdkVersionOption: $(jdkVersion)
        jdkArchitectureOption: "x64"
        publishJUnitResults: true
        testResultsFiles: "**/TEST-*.xml"
        goals: "package"

  # This job creates a work item, and only runs if the previous job failed
  - job: ErrorHandler
    dependsOn: Work
    condition: failed()
    steps: 
    - bash: |
        az boards work-item create \
          --title "Build $(build.buildNumber) failed" \
          --type issue \
          --org $(System.TeamFoundationCollectionUri) \
          --project $(System.TeamProject)
      env: 
        AZURE_DEVOPS_EXT_PAT: $(System.AccessToken)
      displayName: 'Create work item on failure'

  - job: TemplateTesting
    steps:
      - template: steps-template.yml #template reference
        parameters:
          myTempName: 'afreen'
          runExtendedTests: true
      
  - template: jobs-template.yml # Template reference

- stage: Install
  jobs: 
  - job: npminstall
    steps:
    - task: Npm@1
      displayName: 'Run npm install'
      inputs:
        verbose: false
        #command: 'custom' # This is required when you have package.json on different folder path
        #workingDir: '$(Build.SourcesDirectory)/web/app'
        #customCommand: 'run test'
      continueOnError: true
      
- template: stages-template.yml # Template reference
